{"name": "test_trade", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=89.0.4389.114)", "trace": "self = <ter_Oracle.Test58_ZiJinJiHua.Test58_ZiJinJiHua testMethod=test_trade>\n\n    def test_trade(self):\n    \n    \tlogin(G_Ora_Url, mindy, Password, \"亚唐科技\")\n    \n    \tlogging.info(\"开始测试资金计划功能\")\n    \t# 将页面的滚动条滑动到‘资金结算管理’页面的地方\n    \tjs_gd(\"xpath\", \"//span[contains(text(),'资金计划')]\")\n    \t# 用JS的方法点击资金结算管理菜单按钮\n    \tjs_click(\"xpath\", \"//span[contains(text(),'资金计划')]\")\n    \tsleep(1)\n    \t# 退出所有iframe窗体\n    \tswitch_default()\n    \n    \t#测试基础设置--计划项目🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱\n    \ttry:\n    \t\tlogger.info(\"测试基础设置--计划项目\")\n    \t\tswitch_default()\n    \n    \t\t#点击基础设置\n    \t\tclick(\"xpath\",'/html/body/div[1]/div[1]/div/div[2]/div/div[2]/div/div/div/div[14]/div/div/ul/li[1]/a/span[2]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", \"//span[text()='计划项目']\")\n    \t\tsleep(1)\n    \t\tswitch_default()\n    \n    \t\t# 测试新增功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\tfor i in range (1,4):\n    \t\t\t# 切入计划项目窗体\n    \t\t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n>   \t\t\tspan_click(\"新增\")\n\n..\\ter_Oracle\\Test58_ZiJinJiHua.py:65: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nx = '新增'\n\n    def span_click(x):\n        path = \"//span[text()='\" + x + \"']\"\n>       click(\"xpath\", path)\n\n..\\Action\\keyword_action.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlocator_method = 'xpath', locator_exp = \"//span[text()='新增']\"\n\n    def click(locator_method, locator_exp):\n        global driver\n        try:\n            element = getElement(driver, locator_method, locator_exp)\n            element.click()\n        except Exception as e:\n>           raise e\n\n..\\Action\\keyword_action.py:224: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nlocator_method = 'xpath', locator_exp = \"//span[text()='新增']\"\n\n    def click(locator_method, locator_exp):\n        global driver\n        try:\n>           element = getElement(driver, locator_method, locator_exp)\n\n..\\Action\\keyword_action.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec010389d3f5a8cca69dbf15d64f8489\")>\nlocationType = 'xpath', locatorExpression = \"//span[text()='新增']\"\n\n    def getElement(driver, locationType, locatorExpression):\n        try:\n            element = WebDriverWait(driver, 60).until\\\n                (lambda x: x.find_element(by=locationType, value = locatorExpression))\n            return element\n        except Exception as err:\n>           raise err\n\n..\\Action\\find.py:14: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec010389d3f5a8cca69dbf15d64f8489\")>\nlocationType = 'xpath', locatorExpression = \"//span[text()='新增']\"\n\n    def getElement(driver, locationType, locatorExpression):\n        try:\n            element = WebDriverWait(driver, 60).until\\\n>               (lambda x: x.find_element(by=locationType, value = locatorExpression))\n\n..\\Action\\find.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ec010389d3f5a8cca69dbf15d64f8489\")>\nmethod = <function getElement.<locals>.<lambda> at 0x00000236ECAE5B70>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nx = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec010389d3f5a8cca69dbf15d64f8489\")>\n\n>   (lambda x: x.find_element(by=locationType, value = locatorExpression))\n\n..\\Action\\find.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec010389d3f5a8cca69dbf15d64f8489\")>\nby = 'xpath', value = \"//span[text()='新增']\"\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        Find an element given a By strategy and locator. Prefer the find_element_by_* methods when\n        possible.\n    \n        :Usage:\n            element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n        return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:978: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ec010389d3f5a8cca69dbf15d64f8489\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//span[text()='新增']\"}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000236EE8C3BE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77928964+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77928934+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=89.0.4389.114)\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <ter_Oracle.Test58_ZiJinJiHua.Test58_ZiJinJiHua testMethod=test_trade>\n\n    def test_trade(self):\n    \n    \tlogin(G_Ora_Url, mindy, Password, \"亚唐科技\")\n    \n    \tlogging.info(\"开始测试资金计划功能\")\n    \t# 将页面的滚动条滑动到‘资金结算管理’页面的地方\n    \tjs_gd(\"xpath\", \"//span[contains(text(),'资金计划')]\")\n    \t# 用JS的方法点击资金结算管理菜单按钮\n    \tjs_click(\"xpath\", \"//span[contains(text(),'资金计划')]\")\n    \tsleep(1)\n    \t# 退出所有iframe窗体\n    \tswitch_default()\n    \n    \t#测试基础设置--计划项目🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱🌱\n    \ttry:\n    \t\tlogger.info(\"测试基础设置--计划项目\")\n    \t\tswitch_default()\n    \n    \t\t#点击基础设置\n    \t\tclick(\"xpath\",'/html/body/div[1]/div[1]/div/div[2]/div/div[2]/div/div/div/div[14]/div/div/ul/li[1]/a/span[2]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", \"//span[text()='计划项目']\")\n    \t\tsleep(1)\n    \t\tswitch_default()\n    \n    \t\t# 测试新增功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\tfor i in range (1,4):\n    \t\t\t# 切入计划项目窗体\n    \t\t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t\tspan_click(\"新增\")\n    \t\t\tswitch_to(\"xpath\",'//*[@id=\"addbudgetitemsWin-iframe\"]')\n    \n    \t\t\t#代码\n    \t\t\tcoad = str(time.strftime(\"%Y%m%d%H%M%S\"))\n    \t\t\tinput(\"xpath\",'//*[@id=\"code\"]',coad)\n    \t\t\tsleep(1)\n    \n    \t\t\t#名称\n    \t\t\tname =\"测试计划\" +str(time.strftime(\"%Y%M%S\"))\n    \t\t\tinput(\"xpath\",'//*[@id=\"name\"]',name)\n    \t\t\tsleep(1)\n    \n    \t\t\t#交易方向\n    \t\t\tinput_up_click('//*[@id=\"combobox-input-moneyWay\"]','支出')\n    \n    \t\t\t#组织\n    \t\t\tinput_up_click('//*[@id=\"combobox-input-orgid\"]','亚唐科技')\n    \n    \t\t\t#填报方式、明细类型\n    \t\t\tif i ==1:\n    \t\t\t\tinput_up_click('//*[@id=\"combobox-input-fillreportmode\"]', '明细填报')\n    \t\t\t\tinput_up_click('//*[@id=\"combobox-input-budgetdetailtype\"]', '经营性支出')\n    \t\t\telse :\n    \t\t\t\tinput_up_click('//*[@id=\"combobox-input-fillreportmode\"]', '汇总填报')\n    \t\t\t#设置单据对象\n    \t\t\tclick(\"xpath\",'//*[@id=\"noteobjectsgrid-noteobjectvalues-h\"]/div/div[1]/span')\n    \t\t\tsleep(1)\n    \t\t\tclick(\"xpath\",'//*[@id=\"roleassignformid\"]/div/div[4]/div[3]/div[1]')\n    \t\t\tsleep(1)\n    \n    \t\t\t#设置交易类型\n    \t\t\tspan_click(\"设置交易类型\")\n    \t\t\tclick(\"xpath\",'//*[@id=\"paytypegrid-paytypevalues-h\"]/div/div[1]/span')\n    \t\t\tsleep(1)\n    \t\t\tclick(\"xpath\",'//*[@id=\"roleassignformid2\"]/div/div[4]/div[3]/div[1]')\n    \t\t\tsleep(1)\n    \n    \t\t\tspan_click(\"保存\")\n    \t\t\t# 退出所有窗体\n    \t\t\tswitch_default()\n    \t\t\timplici_wait(\"xpath\", \"//span[contains(text(),'操作成功！')]\")\n    \t\t\tif i ==3 :\n    \t\t\t\tprint(\"基础设置--计划项目，新增成功\")\n    \t\t\ttime.sleep(3)\n    \n    \t\t# 测试修改功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t#刷新、勾选按钮\n    \t\tclick(\"xpath\",'//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\",'//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"修改\")\n    \t\tswitch_to(\"xpath\",'//*[@id=\"modWin-iframe\"]')\n    \t\tsleep(1)\n    \n    \t\tinput(\"xpath\",'//*[@id=\"description\"]','测试修改')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"保存\")\n    \t\t# 退出所有窗体\n    \t\tswitch_default()\n    \t\timplici_wait(\"xpath\", \"//span[contains(text(),'操作成功！')]\")\n    \t\tprint(\"基础设置--计划项目，修改成功\")\n    \t\ttime.sleep(3)\n    \n    \t\t# 测试删除功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t# 刷新、勾选按钮\n    \t\tclick(\"xpath\", '//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"删除\")\n    \t\tok_click()\n    \t\t# 退出所有窗体\n    \t\tswitch_default()\n    \t\timplici_wait(\"xpath\", \"//span[contains(text(),'操作成功！')]\")\n    \t\tprint(\"基础设置--计划项目，删除成功\")\n    \t\ttime.sleep(3)\n    \n    \t\t# 测试失效功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t# 刷新、勾选按钮\n    \t\tclick(\"xpath\", '//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"失效\")\n    \n    \t\t# 退出所有窗体\n    \t\tswitch_default()\n    \t\timplici_wait(\"xpath\", \"//span[contains(text(),'失效成功！')]\")\n    \t\tprint(\"基础设置--计划项目，失效成功\")\n    \t\ttime.sleep(3)\n    \n    \t\t# 测试生效功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t# 刷新、勾选按钮\n    \t\tclick(\"xpath\", '//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"生效\")\n    \n    \t\t# 退出所有窗体\n    \t\tswitch_default()\n    \t\timplici_wait(\"xpath\", \"//span[contains(text(),'生效成功！')]\")\n    \t\tprint(\"基础设置--计划项目，生效成功\")\n    \t\ttime.sleep(3)\n    \n    \t\t# 测试设置适用范围功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t# 刷新、勾选按钮\n    \t\tclick(\"xpath\", '//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"设置适用范围\")\n    \t\tswitch_to(\"xpath\",'//*[@id=\"setAppscopeWin-iframe\"]')\n    \t\tswitch_to(\"xpath\",'//*[@id=\"subTabOne-iframe\"]')\n    \t\tsleep(1)\n    \n    \t\tclick(\"xpath\",'//*[@id=\"grid-body-table\"]/tbody/tr[1]/td[2]/div/button')\n    \t\tsleep(1)\n    \t\tspan_click(\"分配\")\n    \n    \t\tswitch_to(\"xpath\",'//*[@id=\"distributeWin-iframe\"]')\n    \t\tspan_click(\"保存\")\n    \n    \t\t# 退出所有窗体\n    \t\tswitch_default()\n    \t\timplici_wait(\"xpath\", \"//span[contains(text(),'操作成功！')]\")\n    \t\tprint(\"基础设置--计划项目，设置适用范围成功\")\n    \t\tclick(\"xpath\", \"//span[text()='计划项目']\")\n    \t\tswitch_default()\n    \t\ttime.sleep(3)\n    \n    \t\t# 测试查看/设置组织范围功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t# 刷新、勾选按钮\n    \t\tclick(\"xpath\", '//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"查看/设置组织范围\")\n    \t\tswitch_to(\"xpath\", '//*[@id=\"setExcludeOrgWin-iframe\"]')\n    \t\tsleep(1)\n    \t\tspan_click(\"适用组织查看\")\n    \n    \t\tswitch_to(\"xpath\",'//*[@id=\"subTabTwo-iframe\"]')\n    \t\timplici_wait(\"xpath\", \"//div[contains(text(),'亚唐科技')]\")\n    \t\tprint(\"基础设置--计划项目，查看/设置组织范围查看成功\")\n    \t\tswitch_default()\n    \t\tclick(\"xpath\", \"//span[text()='计划项目']\")\n    \t\tswitch_default()\n    \t\ttime.sleep(3)\n    \n    \t\t# 测试添加同级项目功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t# 刷新、勾选按钮\n    \t\tclick(\"xpath\", '//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"添加同级项目\")\n    \t\tswitch_to(\"xpath\",'//*[@id=\"addbudgetitemsWin-iframe\"]')\n    \t\t# 代码\n    \t\tcoad = str(time.strftime(\"%Y%m%d%H%M%S\"))\n    \t\tinput(\"xpath\", '//*[@id=\"code\"]', coad)\n    \t\tsleep(1)\n    \n    \t\t# 名称\n    \t\tname = \"测试计划\" + str(time.strftime(\"%Y%M%S\"))\n    \t\tinput(\"xpath\", '//*[@id=\"name\"]', name)\n    \t\tsleep(1)\n    \n    \t\t# 交易方向\n    \t\tinput_up_click('//*[@id=\"combobox-input-moneyWay\"]', '支出')\n    \n    \t\t# 组织\n    \t\tinput_up_click('//*[@id=\"combobox-input-orgid\"]', '亚唐科技')\n    \n    \t\t# 填报方式、明细类型\n    \t\tinput_up_click('//*[@id=\"combobox-input-fillreportmode\"]', '汇总填报')\n    \n    \t\t# 设置单据对象\n    \t\tclick(\"xpath\", '//*[@id=\"noteobjectsgrid-noteobjectvalues-h\"]/div/div[1]/span')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"roleassignformid\"]/div/div[4]/div[3]/div[1]')\n    \t\tsleep(1)\n    \n    \t\t# 设置交易类型\n    \t\tspan_click(\"设置交易类型\")\n    \t\tclick(\"xpath\", '//*[@id=\"paytypegrid-paytypevalues-h\"]/div/div[1]/span')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"roleassignformid2\"]/div/div[4]/div[3]/div[1]')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"保存\")\n    \n    \t\t# 退出所有窗体\n    \t\tswitch_default()\n    \t\timplici_wait(\"xpath\", \"//span[contains(text(),'操作成功！')]\")\n    \t\tprint(\"基础设置--计划项目，添加同级项目成功\")\n    \t\ttime.sleep(3)\n    \n    \t\t# 测试添加下级项目功能💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨💨\n    \t\t# 切入计划项目窗体\n    \t\tswitch_to(\"xpath\", '//*[@id=\"budgetItem-tab-iframe\"]')\n    \n    \t\t#查询数据\n    \t\tclick(\"xpath\",'//*[@id=\"north\"]/div[2]/span')\n    \t\tsleep(1)\n    \t\tspan_click(\"高级查询\")\n    \t\tinput_up_click('//*[@id=\"combobox-input-value_7\"]','汇总填报')\n    \t\tclick(\"xpath\",'//*[@id=\"advQueryWin-btn-1\"]/div[2]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\",'//*[@id=\"f-win-title-advQueryWin\"]/div[1]/div')\n    \t\tsleep(1)\n    \n    \t\t# 刷新、勾选按钮\n    \t\tclick(\"xpath\", '//*[@id=\"treepagingbar-page-refresh\"]')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"t1_t0-fixed\"]/td[2]/div/button')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"添加下级项目\")\n    \t\tswitch_to(\"xpath\", '//*[@id=\"addlowbudgetitemsWin-iframe\"]')\n    \t\t# 代码\n    \t\tcoad = str(time.strftime(\"%Y%m%d%H%M%S\"))\n    \t\tinput(\"xpath\", '//*[@id=\"code\"]', coad)\n    \t\tsleep(1)\n    \n    \t\t# 名称\n    \t\tname = \"测试计划\" + str(time.strftime(\"%Y%M%S\"))\n    \t\tinput(\"xpath\", '//*[@id=\"name\"]', name)\n    \t\tsleep(1)\n    \n    \n    \t\t# 组织\n    \t\tinput_up_click('//*[@id=\"combobox-input-orgid\"]', '亚唐科技')\n    \n    \t\t# 填报方式、明细类型\n    \t\tinput_up_click('//*[@id=\"combobox-input-fillreportmode\"]', '明细填报')\n    \t\tinput_up_click('//*[@id=\"combobox-input-budgetdetailtype\"]', '经营性支出')\n    \t\t# 设置单据对象\n    \t\tclick(\"xpath\", '//*[@id=\"noteobjectsgrid-noteobjectvalues-h\"]/div/div[1]/span')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"roleassignformid\"]/div/div[4]/div[3]/div[1]')\n    \t\tsleep(1)\n    \n    \t\t# 设置交易类型\n    \t\tspan_click(\"设置交易类型\")\n    \t\tclick(\"xpath\", '//*[@id=\"paytypegrid-paytypevalues-h\"]/div/div[1]/span')\n    \t\tsleep(1)\n    \t\tclick(\"xpath\", '//*[@id=\"roleassignformid2\"]/div/div[4]/div[3]/div[1]')\n    \t\tsleep(1)\n    \n    \t\tspan_click(\"保存\")\n    \n    \t\t# 退出所有窗体\n    \t\tswitch_default()\n    \t\timplici_wait(\"xpath\", \"//span[contains(text(),'操作成功！')]\")\n    \t\tprint(\"基础设置--计划项目，添加下级级项目成功\")\n    \t\ttime.sleep(3)\n    \n    \t\t#点击基础设置，回到初始页面\n    \t\t# 点击基础设置\n    \t\tclick(\"xpath\",'/html/body/div[1]/div[1]/div/div[2]/div/div[2]/div/div/div/div[14]/div/div/ul/li[1]/a/span[2]')\n    \t\tsleep(1)\n    \n    \texcept Exception as err:\n    \t\t# 发生其他异常时，打印异常堆栈信息\n    \t\tprint(traceback.print_exc())\n    \t\tlogging.debug(\"计划项目失败！\" + str(traceback.format_exc()))\n    \t\t# Action中新增dir_operation.py，生成日期目录，创建日期目录，存放错误截屏信息\n    \t\tdir_path = make_current_date_dir(parentDirPath + \"\\\\\" + \"ScreenCapture\\\\\")\n    \t\tdir_path = make_current_hour_dir(dir_path + \"\\\\\")\n    \t\tpic_path = os.path.join(dir_path, get_current_time() + \".png\")\n>   \t\tcapture(pic_path)\n\n..\\ter_Oracle\\Test58_ZiJinJiHua.py:367: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Action\\keyword_action.py:419: in capture\n    raise e\n..\\Action\\keyword_action.py:417: in capture\n    driver.save_screenshot(file_path)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1055: in save_screenshot\n    return self.get_screenshot_as_file(filename)\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1032: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1064: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1074: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000236EE8C3BE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77928964+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77928934+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=89.0.4389.114)\n\nC:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python37\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchWindowException"}, "attachments": [{"name": "log", "source": "5899f20a-6721-47cf-87b1-079450fafa22-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e2776c0b-542f-46da-90f8-6da1eaf6201e-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "c8d00fcf-e905-4674-9cc0-99df60ebbf7f-attachment.txt", "type": "text/plain"}], "start": 1618297702348, "stop": 1618297759255, "uuid": "670d155a-7caa-461c-a8a9-fed2b51802ae", "historyId": "c6f3e5fd1a94355e06cc07d5aa3df143", "testCaseId": "478e42b42a68de1f225b73151f197a1c", "fullName": "ter_Oracle.Test58_ZiJinJiHua.Test58_ZiJinJiHua#test_trade", "labels": [{"name": "parentSuite", "value": "ter_Oracle"}, {"name": "suite", "value": "Test58_ZiJinJiHua"}, {"name": "subSuite", "value": "Test58_ZiJinJiHua"}, {"name": "host", "value": "LAPTOP-2GFB3JKG"}, {"name": "thread", "value": "23372-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "ter_Oracle.Test58_ZiJinJiHua"}]}